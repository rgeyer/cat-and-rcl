name "exception"
rs_ca_ver 20160622
package "exception"
short_description "A package for raising and handling common exceptions"
import "log"

# A shortcut for raising a known exception type (InvalidArgument)
#
# @param $origin [String] the origin of the exception (usually <package>.<function>) since the default error handling obfuscates the actual origin.
# @param $message [String] the reason for the exception
#
# @raise a string error in the form {"type":"InvalidArgument", "message":"$message", "origin":"$origin", "task": <task_name()>}
define invalidArgument($origin, $message) do
  call raise_exception("InvalidArgument", $origin, $message)
end

# Raises an exception of the specified type. The result is a JSON encoded
# string error in the form {"type":"$type", "message":"$message", "origin":"$origin", "task": <task_name()>}.
# It can be deserialized by exception.parse_exception()
#
# @param $type [String] an arbitrary exception type
# @param $origin [String] the origin of the exception (usually <package>.<function>) since the default error handling obfuscates the actual origin.
# @param $message [String] the reason for the exception
#
# @raise a string error in the form {"type":"$type", "message":"$message", "origin":"$origin", "task": <task_name()>}
#
# @see http://docs.rightscale.com/ss/reference/rcl/v2/ss_RCL_functions.html#process-information-task_name
define raise_exception($type, $origin, $message) do
  $task_name = task_name()
  raise '{"type":"'+$type+'","message":"'+$message+'","origin":"'+$origin+'","task":"'+$task_name+'"}'
end

# Converts an exception hash (generated by exception.parse_exception()) into a
# formated JSON string for human (or machine) consumption
#
# @param $exception [Hash] a hash generated by exception.parse_exception()
#
# @return [String] the provided exception as a pretty printed JSON string
define exception_to_json($exception) return $message do
  $message = "{\n"
  $message = $message + '  "type": "'+$exception["type"]+'",\n'
  $message = $message + '  "origin": "'+$exception["origin"]+'",\n'
  $message = $message + '  "task": "'+$exception["task"]+'",\n'
  $message = $message + '  "message": "'+$exception["message"]+'",\n'
  $message = $message + '}'
end

# Turns the error message string (a JSON encoded exception) into a hash which
# can be interrogated.
#
# @return $exception [Hash] a hash containing the keys "type" and "message"
#
# @see exception.raise_exception
define parse_exception() return $exception do
  $exception = from_json($_error['message'])
end

# Can be used as an on_error handler to skip if the exception is one of the
# defined types
#
# @param $types [Array<String>] a list of exception types to skip
define skip_exceptions_of_type($types) do
  call parse_exception() retrieve $exception
  if contains?($types, [$exception['type']])
    $_error_behavior = "skip"
    call exception_to_json($exception) retrieve $detail
    call log.write("Exception Skipped", {detail: $detail})
  end
end

# Can be used as an on_error handler to retry if the exception is one of the
# defined types. You are responsible for providing and incrementing the
# attempt counter!
#
# When $attempt_count exceeds $max_retries, the error will be logged to the
# deployment audit entries and the exception will either be skipped or re-raised
# depending on the setting of $re_raise.
#
# @param $types [Array<String>] a list of exception types to retry
# @param $max_retries [Int] the maximum number of times to retry
# @param $attempt_count [Int] the current attempt number. To be provided and
#   and incremented by the caller.
# @param $re_raise [Bool] if true the exception will be re-raised after
#   $max_retries is exceeded. If false, the exception will be skipped
define retry_exceptions_of_type($types, $max_retries, $attempt_count, $re_raise) do
  call parse_exception() retrieve $exception
  call exception_to_json($exception) retrieve $detail
  if contains?($types, [$exception['type']])
    if $attempt_count > $max_retries
      if !$re_raise
        $_error_behavior = "skip"
        call log.write("Exception Skipped", {detail: $detail})
      # else Redundant, since if we don't provide $_error_behavior the error
      # bubbles up.
      end
    else
      $_error_behavior = "retry"
      call log.write("Exception Retried", {detail: $detail})
    end
  end
end
